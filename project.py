import numpy as npimport matplotlib.pyplot as pltimport sounddevice as sdfrom scipy.fftpack import fftimport matht = np.linspace(0 , 3 , 12 * 1024)N = 3*1024F1 = 130.81f1 = 293.66F2 = 174.61f2 = 392F3 = 246.93f3 = 440F4 = 196f4 = 261.63t1 = 0T1 = 0.5t2 = 1T2 = 0.6t3= 2.1T3 = 0.3t4=2.5T4=0.7x1 = (np.sin(2*np.pi*F1*t)+np.sin(2*np.pi*f1*t))*((t>=t1)&(t<=(t1+T1)))x2 = (np.sin(2*np.pi*F2*t)+np.sin(2*np.pi*f2*t))*((t>=t2)&(t<=(t2+T2)))x3 = (np.sin(2*np.pi*F3*t)+np.sin(2*np.pi*f3*t))*((t>=t3)&(t<=(t3+T3)))x4 = (np.sin(2*np.pi*F4*t)+np.sin(2*np.pi*f4*t))*((t>=t4)&(t<=(t4+T4)))#x in time-domainx = x1+x2+x3+x4#sd.play(x, 3 * 1024)f = np.linspace(0 , 512 , (int)(N/2))#x in frequency domainx_f = fft(x)x_f = 2/N * np.abs(x_f [0:int(N/2)])plt.figure()plt.subplot(2,1,1)plt.stem(t,x,use_line_collection='True')plt.subplot(2,1,2)plt.stem(f,x_f,use_line_collection='True')fn1 =  np.random.randint(0, 512)print(fn1)fn2 =  np.random.randint(0, 512)print(fn2)#noise generated for time domainn_t = np.sin(2*fn1*np.pi*t)+np.sin(2*fn2*np.pi*t)#x in time domain after adding noisexn = x + n_t#sd.play(xn,3*1024)#x in frequency domain after adding noisexn_f = fft(xn)xn_f = 2/N * np.abs(xn_f [0:(int)(N/2)])plt.figure()plt.subplot(2,1,1)plt.stem(t,xn,use_line_collection='True')plt.subplot(2,1,2)plt.stem(f,xn_f,use_line_collection='True')#array containing the two frequencies with the very high peaksf_array = f[np.where(xn_f>math.ceil(np.max(x_f)))]f1 = int (f_array[0])f2 = int(f_array[1])x_filtered = xn - (np.sin(2*f1*np.pi*t)+np.sin(2*f2*np.pi*t))x_f_filtered = fft(x_filtered)x_f_filtered = 2/N * np.abs(x_f_filtered [0:int(N/2)])plt.figure()plt.subplot(2,1,1)plt.stem(t,x_filtered,use_line_collection='True')plt.subplot(2,1,2)plt.stem(f,x_f_filtered,use_line_collection='True')sd.play(x_filtered, 3* 1024)                    